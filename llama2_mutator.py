# PPO process that receive seeds from fuzzer then send back the mutated seeds to fuzzer
from dataclasses import dataclass, field
from typing import Optional
import os
import torch
import tyro
from accelerate import Accelerator
from peft import LoraConfig
from tqdm import tqdm
from transformers import AutoTokenizer, BitsAndBytesConfig

from trl import (
    AutoModelForCausalLMWithValueHead,
    PPOConfig,
    set_seed,
)
import threading
import re
import sysv_ipc
import struct
import random

tqdm.pandas()

TYPE_SEED = 1
TYPE_TEXT_SEED = 2
TYPE_REWARD = 3
TYPE_REQUEST = 4

access_token = "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"
cur_path = os.path.dirname(os.path.realpath(__file__))
output_dir = os.path.join(cur_path, "ppo_checkpoint")
message_queue = []
seed_id_map = {}
id_rwd_map = {}
seeds_from_fuzzer = set()
uid = 1
shared_resource_lock = threading.Lock()


@dataclass
class ScriptArguments:
    """
    Setup experiment config
    """

    fuzzing_target: Optional[str] = field(default="libpng")
    fuzzing_object: Optional[str] = field(default="")
    if_mixed_model: Optional[bool] = field(default=True)
    if_text: Optional[bool] = field(default=False)
    temperature: Optional[float] = field(default=1.25)
    peft_config: Optional[LoraConfig] = field(
        default_factory=lambda: LoraConfig(
            r=64,
            lora_alpha=16,
            lora_dropout=0.1,
            bias="none",
            target_modules=[
                "q_proj",
                "down_proj",
                "gate_proj",
                "o_proj",
                "k_proj",
                "v_proj",
                "up_proj",
            ],
            task_type="CAUSAL_LM",
        ),
    )
    trust_remote_code: bool = field(
        default=True, metadata={"help": "Enable `trust_remote_code`"}
    )


args = tyro.cli(ScriptArguments)


def mq_thread2():
    try:
        mq2 = sysv_ipc.MessageQueue(1234, sysv_ipc.IPC_CREAT)
    except sysv_ipc.ExistentialError:
        print(f"Message queue with key {1234} already exists.")
        return
    while True:
        # only receive request msg
        try:
            msg, mtype = mq2.receive(type=TYPE_REQUEST)
        except RuntimeError as e:
            print(e)


def mq_thread():
    """
    Thread to receive request from fuzzer, and send generated seed to fuzzer
    """
    global message_queue, seed_id_map, seeds_from_fuzzer
    try:
        mq = sysv_ipc.MessageQueue(1234, sysv_ipc.IPC_CREAT)
    except sysv_ipc.ExistentialError:
        print(f"Message queue with key {1234} already exists.")
        return
    while True:
        # only receive request msg
        try:
            msg, mtype = mq.receive(type=TYPE_REQUEST)
            if msg != b"":
                if len(seeds_from_fuzzer) > 30:
                    seeds_from_fuzzer.clear()
                seeds_from_fuzzer.add(msg.decode(errors="ignore")[4:])
            if message_queue != []:
                # send uid + seed
                seed = message_queue.pop(0)
                send_msg = struct.pack("I", seed_id_map[seed])
                if len(seed) > (2045 - len(send_msg)):
                    seed = seed[: (2045 - len(send_msg))]
                send_msg = send_msg + seed.encode("utf-8")
                if len(send_msg) >= 2045:
                    print("::oversize")
                    continue
                if not args.if_text:
                    mq.send(
                        send_msg,
                        True,
                        type=TYPE_SEED,
                    )
                else:
                    mq.send(
                        send_msg,
                        True,
                        type=TYPE_TEXT_SEED,
                    )
        except RuntimeError as e:
            print(e)


def hex_string_to_hex(hex_string, fuzzing_target, if_text):
    """
    Formatting generated hex string.

    Returns:
        String of hex.
    """
    if len(hex_string.split("### Output:")) >= 2:
        hex_string = hex_string.split("### Output:")[1]
    else:
        hex_string = hex_string.replace(
            f"### Input: ```Based on below hex {fuzzing_target} seed, mutate a new {fuzzing_target} seed. Make sure the example is complete and valid.",
            " ",
        )
    if not if_text:
        hex_string = re.sub(r"[^a-zA-Z0-9\s]", " ", hex_string)
        hex_values = hex_string.replace("0x", " ")
        # Split the string into sections
        sections = hex_values.split()
        # Iterate through the sections and add leading zeros if needed
        result = []
        for section in sections:
            if len(section) == 1:
                section = "0" + section
                result.append(section)
            elif len(section) == 2:
                result.append(section)
        result = "".join(result)
    else:
        result = hex_string
    if len(result) > 2040:  # limite seed size to 2048
        result = result[:2040]
    return result


def main():
    """
    Main function to run PPO loop
    """
    model_name = f"llama-2-7b-structured-{args.fuzzing_target}-hex-mutator"
    if args.if_mixed_model:
        model_name = f"llama-2-7b-structured-{args.fuzzing_target}-mix-hex-mutator"
    if args.fuzzing_object != "":
        model_name = f"llama-2-7b-structured-{args.fuzzing_target}-{args.fuzzing_object}-mix-hex-mutator"
        args.fuzzing_target = args.fuzzing_target + " " + args.fuzzing_object
    # Init the tokenizer and dataset
    tokenizer = AutoTokenizer.from_pretrained(
        os.path.join(cur_path, model_name),
        use_fast=True,
        token=access_token,
    )
    # Some tokenizers like GPT-2's don't have a padding token by default, so we set one here.
    # tokenizer.pad_token_id = tokenizer.eos_token_id
    tokenizer.pad_token = tokenizer.bos_token
    # tokenizer.padding_side = "left"
    # We retrieve the dataloader by calling the `build_dataset` function.

    # set seed before initializing value head for deterministic eval
    set_seed(0)

    # Build the model.
    peft_config = args.peft_config
    # Copy the model to each device
    current_device = Accelerator().local_process_index
    device_map = {"": current_device}

    model = AutoModelForCausalLMWithValueHead.from_pretrained(
        os.path.join(cur_path, model_name),
        trust_remote_code=args.trust_remote_code,
        device_map=device_map,
        peft_config=peft_config,
        token=access_token,
        torch_dtype=torch.bfloat16,
        quantization_config=BitsAndBytesConfig(
            load_in_4bit=True,
            bnb_4bit_quant_type="nf4",
            bnb_4bit_compute_dtype=torch.bfloat16,
            bnb_4bit_use_double_quant=True,
        ),
        # use_flash_attention_2=True, Unable to use this feature in current GPU
    )
    # Whether or not the model should use the past last key/values attentions (if applicable to the model) to speed up decoding.
    model.config.use_cache = False
    model.config.pretraining_tp = 1

    # flash attention 1
    torch.backends.cuda.sdp_kernel(
        enable_flash=True, enable_math=False, enable_mem_efficient=False
    )
    example = {
        "kamailio parse_msg": "0x670x6f,0x640x76,0x710x6e,0x780x66,0x6a0x69,0x700xe9,0x10x1,0x10x87,0x6e0x20,0x700xef,0xe10x83,0x00x1c,0x10x6c,0x200x53,0x590x5a,0x00x0,0x00x0,0x00xa,0x2d0x2d,0x6a0x6d,0x740x74,0x3a0x2c,0x2e0x2e,0x2c0xf6,0x920x16,0x10x33,0x350x4f,0x10xdd,0x5c0x59,0x10x1,0x820x2c,0x200x46,0xf0x20,0x00x4b,0x510x33,0x200x20,0x200x20,0x200x20,0x170x87,0x200x4b,0x4f0x35,0xa0x6d,0x3a0x2c,0x2c0x2c,0x2c0xee,0x7a0x79,0x630x6b,0x760x9,0xd0x4b,0x520x70,0x4f0x34,0x690xbf,0xbf0xcd,0x7f0x70,0x90x9,0x90x9,0x10x1,0x520x4a,0x320xa,0x560x3a,0x90x9,0x90x9,0x90x9,0x530x49,0x500x2f,0x320x2e,0x300x20,0x90x2f,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x770x77,0x200x20,0x200x20,0x200x52,0x470x34,0x670x6f,0x640x76,0x710x6e,0x740x3a,0x2d0x2e,0x2d0x2e,0x2e0x2d,0x6a0x73,0x670x74,0x3a0xa,0xa0xf,0x10x58,0x510x8,0x00x4e,0x770x56,0x00xa2,0x5e0x56,0x00x0,0xfd0x9,0x90x9,0x90x9,0x90x89,0x6f0x17,0x540x4c,0x390xa,0x740x3a,0x2d0x6b,0x720x79,0x200x62,0x790x6f,0x770x71,0x6b0x0,0x870x61,0x2c0x2c,0xfd0x9,0x90x9,0x90x68,0x69",
        "kamailio uri": "0x750x72,0x6e0x3a,0x760x75,0x710x6e,0x740x3b,0x540x72,0x610x6e,0x730x70,0x6f0x40,0x3a0x2c,0x440x44,0x560x70,0x790xed,0x3c0x76,0x790x3b,0x610x3a,0x5e0x3a,0x3b0x74,0x3b0x6a,0x3a0x3f,0xba0x2d",
        "binutils nm": "0x4d0x5a,0xef0x1,0x1c0x1,0x890x0,0x30x0,0x10x1,0x00x0,0x10x1,0x00x0,0x00x0,0x00x0,0x00xc,0x70xbc,0x6c0x80,0xa00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x900x74,0x3e0x1,0x00x0,0x00x0,0xa00x6d,0x10x1,0x10x1,0x00x0,0x10x1,0x10x0,0x800x0,0x00x0,0xe0x1,0xba0xe,0x10xcb,0x10x0,0x10x1,0xe0x4b,0xcd0x2a,0x570x75,0x760x6c,0x200x75,0x790x76,0x6b0x6f,0x610x71,0x200x63,0x6c0x70,0x6b0x6d,0x790x20,0x660x62,0x200x7a,0x6f0x68,0x200x69,0x770x20,0x420x52,0x510x20,0x700x78,0x610x1,0x00xd,0xd0xa,0x230x0,0x00x0,0x00x0,0x00x0,0x500x45,0x00x0,0x1d0xfd,0x10x0,0x900x79,0x2a0x1,0x70x0,0x00x0,0x1c0x0,0x00x0,0x70x0,0x10x1,0x1b0x1,0x00x1c,0x10x91,0x3d0x1,0x00x1,0x10x1,0x10x1,0x10x0,0x00x0,0x00x0,0x00x0,0x00x1,0x00x0,0x00x1,0x10x1,0x10x0,0x00x1,0x10x0,0x00x0,0x00x0,0xef0x1,0x10x0,0x100x2,0x110x1,0x310x11,0x90x67,0x10x1,0x10xef,0x10x1,0x10x1,0x00x0,0x00x0,0x720x61,0x20x5e,0x10x6,0x50x5,0x20x0,0x20x3,0x200x1b,0x90x1,0x00x0,0x00x0,0x00x0,0x240x0,0x00x0,0x00x0,0x00xa,0x00x0,0x00xc,0x10x0,0x00x82,0x00x1,0x10x1,0x10x0,0x00x0,0x00x0,0x00x1,0x10x0,0x00x0,0x00x24,0x00x0,0x00x0,0x00x0,0x00x24,0x00x0,0x00x0,0x00x0,0x00x24,0x00x0,0x00x0,0x00x0,0x00x24,0x00x0,0x00x14,0x00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x1a,0x00x0,0x00x0,0x00x0,0x00x0,0x240x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00xd2,0x00x0,0x00x0,0x00x0,0x00x0,0x00x1,0x00x0,0x00x2,0x00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x2b,0x00x0,0x10x1,0x00x0,0x00xd,0x00x0,0x00x13,0x00x0,0x00x9d,0x00x1,0x10x0,0x10x0,0x00x0,0x00x0,0x00xe6,0x30x0,0x00x1,0x00x19,0x00x0,0x00x0,0x00x0,0x00x0,0x00x80,0x00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x3,0x00xe,0x00x1,0x10x0,0xbb0xbb,0xbb0xbb,0xbb0xbb,0xbb0xbb,0xbb0xbb,0xbb0x0,0x10x0,0x00x4,0x00x1c,0xbb0xbb,0xbb0xbb,0xbb0xbb,0xbb0xbb,0x00x17,0xf00x9e,0x1c0x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x3,0x00x10,0x00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x1,0x10x1,0x10x1,0x10x1c,0x10xd,0x10x1,0x10x1,0x10x1,0x00x0,0x00x0,0x00x0,0x00x0,0x310x0,0x00x0,0x00x11,0x00x0,0x1",
        "binutils objcopy": "0x750x1,0x00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x8,0x50x20,0x00x0,0x00x0,0x00x47",
        "binutils readelf": "0x7f0x45,0x4c0x46,0x7f0x46,0x4e0x43,0x90x0,0x00x0,0x00x22,0x3e0x71,0x670x36,0x20x1,0xd0x0,0x00x0,0x800x0,0x00x0,0x10x90,0xd30xa5,0x40x0,0x00x0,0x10x1,0x00x0,0x00x0,0x00x1,0xff0xff,0x4e0x0,0x10x0,0x00x0,0x10x19,0x00x20,0x750x6e,0x6b0x6e,0x6f0x77,0x6e0x20,0x410x42,0x490x2c,0x200x6d,0x640x6d,0x780x2c,0x200x6d,0x690x70,0x730x33,0x320x72,0x360x0,0x300x19,0x620x9d,0x5c0x0,0x10x29,0x480x42,0x420x42,0x420x42,0x420x42,0x420x42,0x420x42,0x420x42,0x420x42,0x20x0,0x7f0xfe,0xff0xff,0xff0xff,0x420x42,0x420xf3,0x2e0x53,0x430x4f,0x520x45,0x2e0x73,0x740x74,0x620x4e,0x500x82,0x00x0,0x5a0x63,0x9d0x5e,0x10x0,0x410x54,0x450x0,0x7f0x45,0x4c0x46,0x7f0x46,0x4e0x43,0x90x0,0x00x0,0x00x22,0x3e0x54,0x7f0x45,0x140x0,0xd0x0,0x00x0,0x800x0,0x00x0,0xff0x90,0xd30xa5,0x40x0,0x00x0",
        "binutils strings": "0x00xa,0x20x0,0x00x0,0x10xff,0xff0x0,0x00x12,0xff0x18,0x00x0,0x00x0,0x2f0x2f,0x2f0x2f,0x2f0x2f,0x2f0x2f,0x2f0x2f,0x2f0x2f,0x2f0x2f,0x2f0x2f,0x2f0x2f,0x2f0x0,0x00x3c,0x00x2f,0x2f0x2f,0x2f0x2f,0x2f0x2f,0x2f0x2f,0x00x0,0x00x0,0x00x0,0xa0x17,0x00xac,0x880x0,0x00x0,0x6e0x75,0x8c0x65,0x720x69,0x570x22,0x4d0x0,0x00x0,0x30x0,0x00x0,0x20xff,0x00x0,0x00x0,0x800x7f,0xf0x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x0,0x00x2,0x00x0,0x4d0x4d,0xff0x80,0x490x47,0xc80x49,0x10x7,0x00x0,0xff0xff,0xff0xdf,0x00x0,0x00x0,0xff0xe0",
        "bloaty": "0x00x61,0x730x6d,0x650x7a,0x6a0x9,0xd0x20,0x90x0,0x10x9,0x90xb,0x700x68,0x90x9,0xa0x0,0x00x0,0xff0x0,0x10x1,0x10x1,0x10x1,0x10x1,0x10x1,0x10x1,0x2c0x76,0x90x0,0x00x24,0x200xa,0x6e0x71,0xb0x9,0xa0x0,0x00x0,0xff0x9,0xa0x1,0x170x9,0xa0xa,0x90x13,0x1b0x1b,0x10x1,0xf0x1,0x10x1,0x600x1,0x10x1,0x10x1,0x10x0,0x40x1,0x10x1,0x00x1,0x10x1,0x10x2c,0x720x9,0x00x1,0x2a0x9,0xa0x79,0x6a0xb,0x90xa,0x00x0,0x00xff,0x90xa,0x700x76,0x90x9,0xa0x9,0x6f0x6c,0x90x9,0xa0x9,0x90x9,0x2b0x1,0x10x1,0x10x1,0x10x1,0x10xcb,0x170x1",
        "grok": "0x00x0,0x00xc,0x6a0x50,0x200x20,0xd0xa,0x870xa,0x00x0,0x00x14,0x660x74,0x790x70,0x6a0x77,0x440x9,0x10x1,0x10x1,0x670x6e,0x340x9,0x00x0,0x00x5b,0x6a0x70,0x320x68,0x00x0,0x00x16,0x690x68,0x640x72,0x10x1,0x10x9,0x10x1,0x10x20,0x00x4,0xff0x7,0x10x1,0x00x0,0x00xc,0x620x70,0x630x63,0x1b0x1b,0x1b0x1,0x00x0,0x00xf,0x630x6f,0x6c0x72,0x10x1,0x10x1,0x00x0,0x100x0,0x00x0,0x220x63,0x640x65,0x660x0,0x40x0,0x00x0,0x00x0,0x00x0,0x10x0,0x00x0,0x20x0,0x20x0,0x00x0,0x30x0,0x30x0,0x10x0,0x00x1,0x10x0,0x250x6a,0x700x32,0x630xff,0x4f0xff,0x510x0,0x320x0,0x10x0,0x00x0,0x200x0,0x00x0,0x200x0,0x00x0,0xb0x0,0x00x0,0x00x0,0x00x0,0x200x0,0x00x0,0x200x0,0x00x0,0x00x0,0x00x0,0x00x0,0x40x4,0x10x1,0x40x9,0x10x4,0x10x1,0x00x1,0x10xff,0x520x0,0xc0x0,0x10x1,0x00x0,0x50x4,0x40x1,0x10xff,0x5c0x0,0x130x40,0x290x31,0x310x37,0x310x31,0x350x31,0x310x39,0x310x31,0x360x31,0x310x32,0xff0x64,0x00x25,0x00x1,0x420x6c,0x660x64,0x6e0x62,0x630x9,0x630x6b,0x90x4b,0x750x62,0x680x48,0x530x46,0x4a0x9,0x740x63,0x790x6a,0x6e0x72,0x740x9,0x350x2d,0xe0x2c,0x310xff,0x900x1,0xd0x1,0x10x1,0x10x1,0xe60x1,0x00x0,0xec0xbe,0x170x1c,0xb00xff,0xf0x20,0xbc0xfe,0x1c0xff,0xde0x8f,0x1d0x1b,0xd80xb9,0x170x19,0xc00xd0,0xdb0xf,0x200xa8,0xb70x3a,0x1c0xdc,0x9c0x17,0x1c0xe8,0xda0x4e,0xd00xdb,0x90x14,0x10x59,0x100xde,0x9f0xbf,0x140x3d,0xa80xff,0xdc0x9b,0xd0x1,0xb00xaa,0x400x0,0xd80xb1,0x30x1c,0x00xa2,0x420xa3,0x290x0,0xd80xb1,0x30x1c,0x00xa2,0x520x8d,0x7d0x0,0xff0xde,0x8f0xf5,0x400x65,0xdd0xd6,0x2c0xdc,0x9b0xd,0x400xd9,0x370x57,0xa60xe1,0xa0xdd,0xf90xdc,0x9c0xf,0x3e0xd9,0x320x57,0xa60xe1,0xa0xc0,0xff0xdf,0x970xbf,0xe20xe9,0xd70x87,0x40x5b,0xde0x8f,0xf10xe2,0xd30x24,0x3c0x8a,0x590xa9,0xde0x8f,0xf30xe2,0xd30x28,0x3e0x86,0x760xff,0x00xa6",
        "libavc avc_dec": "0x00x48,0xb70x96,0x2c0xd8,0x200xd9,0x230xee,0xef0x78,0x320x0,0x800x0,0x00x0,0x10x67,0x640x0,0xa0x64,0x00x0,0x00x0,0x00x1,0x60x0,0x10x0,0x00xdc,0x450xe9,0xbd0xe6,0xd90x48,0xb70x96,0x2c0xd8,0x200xd9,0x230xee,0xef0x78,0x320x0,0x800x0,0x00x0,0x10x67,0x640x0,0xa0x64,0x00x0,0x00x96,0x180x70,0x5f0xe4,0x810x0,0x00x1,0x410x0,0x10x67,0x640x0,0xa0x64,0x00x0,0x00x0,0x00x1,0x60x0,0x10x0,0x00xdc,0x450xe9,0xbd0xe6,0xd90x48,0xb70x96,0x2c0xd8,0x200xd9,0x230xee,0xef0x78,0x320x0,0x800x0,0x00x0,0x10x67,0x640x0,0xa0x64,0x00x0,0x00x96,0x180x70,0x5f0xe4,0x810x0,0x00x1,0x410x0,0x700xa7,0x650x30,0x360x20,0x2d0x20,0x90x0,0x00x0,0x00x0,0x00x0,0xb00x12,0x620x1,0x00x0,0x00x0,0x90x0,0x00x0,0x00x0,0x00x0,0x200xe3,0x520x0,0x00x0,0x00x66,0x740x20,0x320x30,0x300x33,0x2d0x32,0x300x31,0x360x2d,0x320x30,0x310x36,0x200x2d,0x200x0,0x00x0,0x10x6,0x310x34,0x380x20,0x720x35,0x370x35,0x360x9,0x650x34,0x390x64,0x620x31,0x360x9,0x2d0x9,0x530x2d,0x380x32,0x320x2b,0x4e0x57,0x410x52,0x2c0x38,0x90x46,0x480x42,0x90x66,0x6e0x62,0x620x64,0x90x2c,0x90x44,0x640x69,0x6e0x78,0x620x65,0x740x20,0x130x30,0x130x33,0x3c0x34,0x470x50,0x360x20,0xd10x20,0x690x70,0x760x71,0x3e0x2f,0x2b0x74,0x6a0xba,0x2d0x18,0x700xc5,0x800x4d,0x280x5b,0x460x79,0x470x68,0x840x2,0x00x36,0x340x20,0x2d0x20,0x630x6f,0x720x65,0x200x31,0x340x38,0x200x72,0x740x23,0x200x20,0x200x20,0x720x20,0x720x78,0x530x6e,0x720xb1,0x620x62,0x200x20,0x200x20,0x4d0x76,0x610x5a,0x630x20,0x780x32,0x00x80,0x00x0,0x00x1,0x670x64,0x00xa,0x640x0,0x00x0,0x00x0,0x10x6,0x00x1,0x00x0,0xdc0x45,0xe90xbd,0xe60xd9,0x480xb7,0x960x2c,0xd80x20,0xd90x23,0xee0xef,0x780x32,0x00x80,0x00x0,0x00x1,0x670x64,0x00xa,0x200x2d,0x200x0,0x00x0,0x10x6,0x310x34,0x380x20,0x720x35,0x370x35,0x360x9,0x650x34,0x390x64,0x620x31,0x360x9,0x2d0x9,0x530x2d,0x380x32,0x320x2b,0x4e0x57,0x410x52,0x2c0x38,0x90x46,0x480x42,0x90x66,0x6e0x62,0x620x64,0x90x2c,0x90x44,0x640x69,0x6e0x78,0x00x70,0xa70x65,0x300x36,0x200x2d,0x200x9,0x00x0,0x00x0,0x00x0,0x00xb0,0x120x62,0x10x0,0x00x0,0x00x9,0x00x0,0x00x0,0x00x0,0x00x20,0xe30x52,0x00x0,0x00x0,0x660x74,0x200x32,0x300x30,0x330x2d,0x320x30,0x310x36,0x2d0x32,0x300x31,0x360x20,0x2d0x20,0x00x0,0x00x1,0x60x31,0x340x38,0x200x72,0x350x37,0x350x36,0x90x65,0x340x39,0x640x62,0x310x36,0x90x2d,0x90x53,0x2d0x38,0x320x32,0x2b0x4e,0x570x41,0x520x2c,0x380x9,0x460x48,0x420x9,0x660x6e,0x620x62,0x640x9,0x2c0x9,0x440x64,0x690x6e,0x780x62,0x650x74,0x200x13,0x300x13,0x330x3c,0x340x47,0x500x36,0x200xd1,0x200x69,0x700x76,0x710x3e,0x2f0x2b,0x740x6a,0xba0x2d,0x180x70,0xc50x80,0x4d0x28,0x5b0x46,0x790x47,0x680x84,0x20x0,0x360x34,0x200x2d,0x200x63,0x6f0x72,0x650x20,0x310x34,0x380x20,0x720x74,0x230x20,0x200x20,0x200x72,0x200x72,0x780x53,0x6e0x72,0xb10x62,0x620x20,0x200x20,0x200x4d,0x760x61,0x5a0x63,0x200x78,0x320x0,0x800x0,0x00x0,0x10x67,0x640x0,0xa0x64,0x00x0,0x00x0,0x00x1,0x60x0,0x10x0,0x00xdc,0x450xe9,0xbd0xe6,0xd90x48,0xb70x96,0x2c0xd8,0x200xd9,0x230xee,0xef0x78,0x320x0,0x800x0,0x00x0,0x10x67,0x640x0,0xa0x20,0x2d0x20,0x00x0,0x00x1,0x60x31,0x340x38,0x200x72,0x350x37,0x350x36,0x90x65,0x340x39,0x640x62,0x310x36,0x90x2d,0x90x53,0x2d0x38,0x320x32,0x2b0x4e,0x570x41,0x520x2c,0x380x9,0x460x48,0x420x9,0x660x6e,0x620x62,0x640x9,0x2c0x9,0x440x64,0x690x6e,0x780x62,0x650x74,0x200x13,0x300x13,0x330x2d,0x340x47,0x500x36,0x200xd1,0x200x69,0x700x76,0x710x3e,0x2f0x2b,0x740x6a,0xba0x2d,0x180x70,0xc50x80,0x4d0x28,0x5b0x46,0x790x47,0x680x84,0x00x0,0x360x34,0x200x2d,0x200x63,0x6f0x72,0x650x20,0x310x34,0x380x20,0x720x74,0x230x20,0x200x20,0x200x2c,0x90x44,0x640x69,0x6e0x78,0x620x65,0x740x20,0x130x30,0x130x33,0x2d0x34,0x470x50,0x360x20,0xd10x20,0x690x70,0x760x71,0x3e0x2f,0x2b0x74,0x6a0xba,0x2d0x18,0x700xc5,0x800x4d,0x280x5b,0x460x79,0x470x68,0x840x0,0x00x72,0x200x72,0x780x53,0x6e0x72,0x490x62,0x620x20,0x200x20,0x200x4d,0x760x61,0x5a0x63,0x200x78,0x320x0,0x800x0,0x00x0,0x10x67,0x640x0,0xa0x64,0x00x0,0x00x0,0x00x1,0x60x0,0x10x0,0x00xdc,0x450xe9,0xbd0xe6,0xd90x48,0xb70x96,0x2c0xd8,0x200xd9,0x230xee,0xef0x78,0x320x0,0x800x0,0x00x0,0x10x67,0x640x0,0xa0x64,0x00x0,0xd90x48,0xb70x96,0x2c0xd8,0x200xd9,0x230xee,0xef0x78,0x320x0,0x800x0,0x00x0,0x10x67,0x640x0,0xa0x64,0x00x0,0x00x96,0x180x70,0x5f0xe4,0x810x0,0x00x1,0x410x0,0x700xa7,0xa10x51,0x440x4f,0x200x2d,0x200x63,0x6f0x72,0x200x20,0x4a0x61,0x620x77,0x650x73,0x90x20,0x200x54,0x660x67,0x770x71,0x6f0xa,0x3f0x20,0x200x20,0x200x20,0x5a0x42,0x600x20,0x200x20,0x200x20,0x200x20,0x200x30,0x90x20,0x200x20,0x200x20,0x200x20,0x310x20,0x200x9,0x57",
        "libavc mvc_dec": "0x680x68,0x680x68,0x680x68,0x680x68,0x680x68,0x680x10,0x100x10,0x00x0,0x00x1,0x10x0,0x00x0,0x00x1d,0x00x81,0x10x1,0x10x68,0x10xcc,0x640x64,0x640x64,0x640x64,0x640x64,0x640x64,0x640x64,0x640x64,0xff0xff,0xff0x68,0x680x68,0x680x68,0x680x68,0x00x68,0x69",
        "libavc svc_dec": "0xb90x0,0x00x0,0x00x40,0x00x0,0x10x1,0x10x1,0x10x1,0x10x1,0x10x1,0x10x1,0x10x1,0x10x1,0x10x1,0x00x0,0x10xc3,0xc30xa6",
        "matio": "0x4d0x41,0x540x4c,0x410x42,0x200x35,0x2e0x30,0x200x4d,0x410x54,0x2d0x66,0x690x6c,0x650x2c,0x200x50,0x6c0x61,0x740x66,0x6f0x72,0x6d0x3a,0x200x47,0x4c0x4e,0x580x38,0x360x2c,0x200x43,0x720x65,0x610x74,0x650x64,0x200x6f,0x6e0x3a,0x200x57,0x650x64,0x200x41,0x750x67,0x200x20,0x330x20,0x310x39,0x3a0x35,0x330x3a,0x300x39,0x200x32,0x300x30,0x350x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x200x20,0x00x1,0x490x4d,0xf0x0,0x00x0,0x590x0,0x00x0,0x780x9c,0xe30x63,0x600x60,0xc80x0,0x620x36,0x200xe6,0x800xd2,0x200xc0,0xa0xe5,0x830x68,0x2e0x20,0x660x4,0xc20x14,0x200xcd,0x40xc4,0x460x20,0x3e0x13,0x330xb,0x2b0x1b,0x3b0x7,0x270x17,0x370xf,0x2f0x1f,0xbf0x80,0xa00x90,0xb00x88,0xa80x98,0xb80x84,0xa40x94,0xb40x8c,0xac0x9c,0xbc0x82,0xa20x92,0xb20x8a,0xaa0x9a,0xba0x86,0xa60x96,0xb60x8e,0xae0x9e,0xbe0x81,0xa10x11,0xc40x5c,0x00xde,0xac0x6,0x3c0xf,0x00x0,0x00x8c,0x00x0,0x00x78,0x9c0x2d,0xca0x2d,0xf0x81,0x10x10,0x00xe0,0xb30xf9,0x9a0x99,0x90x82,0x200x8,0x820x20,0x80x82,0x600xf3,0x320x41,0xf40x13,0xfc0x4,0x9b0x3f,0xf00x46,0x510x14,0x450x51,0x140xdf,0xf80x46,0x510x14,0x450x51,0xf40xf8,0xb80xbb,0xe70x6e,0xb70xbb,0x460x44,0xbc0x28,0x530xa5,0x120xbf,0x280xfd,0xf70xcf,0xac0x51,0x900xdb,0xff0x3d,0xff0x7e,0xa40x53,0x2d0x51,0xa40x1c,0xc90xb8,0x130xb3,0x880x26,0x5d0x86,0x240xac,0x580xb3,0x210x65,0xc70x9e,0x30x47,0x4e0x9c,0xb90x90,0x910x73,0xe50xc6,0x9d0x7,0x4f0x5e,0xc40x3c,0xa20x48,0x950x3a,0x4d0x5a,0xb40xe9,0xd00xa5,0x470x9f,0x10x43,0x460x8c,0x990x90,0xb00x60,0x390x7f,0x30xae,0x440x23,0xe50xf,0x00x0,0x00x7c,0x00x0,0x00x78,0x9c0x2d,0xcc0x59,0xe0x82,0x500xc,0x850xe1,0xca0x55,0xc40x9,0xc50x79,0x460x5,0x440x6,0xa70xeb,0xaa0xdc,0xa90x4b,0xf20xd1,0x1f0x6c,0x930x2f,0xcd0x49,0xda0xe3,0x8b0xc8,0x170x2e,0x3c0xf4,0xe50x3f,0x2d0xcd,0xd50xee,0xa20x21,0x460xde,0x2f0x5b,0xe70x4f,0x9d0x45,0x1c0x18,0x340xf5,0xae0xea,0x680xeb,0x5f0x47,0xff0x7a,0xda0x39,0x800x8f,0x210x46,0x80x30,0xc60x4,0x530xcc,0x300xc7,0x20x4b,0xac0xb0,0xc60x6,0x5b0xec,0xb00x47,0x880x3,0x8e0x38,0x210x42,0x8c0x4,0x670xa4,0xb80x20,0x430x8e,0x20x25,0xae0xb8,0xe10x8e,0x70x9e,0xb00xf8,0x10xde,0xb80x7,0xd70xf,0x00x0,0x00x6e,0x00x0,0x00x78,0x9c0x2d,0xce0x45,0xe0x2,0x510x10,0x450xd1,0x830xbb,0xbb0xbb,0x3b0x3,0x560xc4,0x840x1d,0xb10x5c,0x7e0x9a,0xae0xe4,0x560xea,0xc90xa0,0xaa0xf8,0x60xb2,0x810x7c,0xa00xe8,0x3f0x99,0x580x67,0x620x2f,0x210xe5,0xf30x78,0x850xcd,0x3b0xd2,0xc90x70,0xa70x43,0x9e0x95,0xb0xcd,0x420x68,0x950x94,0x550x54,0xd50xd4,0x350x34,0xb50xb4,0x750x74,0xf50xf4,0xd0xc,0x8d0x8c,0x4d0x4c,0xcd0xcc,0x2d0x2c,0xad0xac,0x6d0x6c,0xed0xec,0x1d0x1c,0x9d0x9c,0x5d0x5c,0xdd0xdc,0x3d0x3c,0xa30x3f,0x7e0xcd,0x900x7,0x110xf,0x00x0,0x00x5b,0x00x0,0x00x78,0x9c0xe3,0x630x60,0x600xc8,0x00x62,0x360x20,0xe60x80,0x620x10,0x600x85,0xb20x41,0x340x17,0x100x33,0x320x30,0x310x64,0x5a0x80,0x680x6,0x60x23,0x100x9f,0x890x99,0x850x95,0x8d0x9d,0x830x93,0x8b0x9b,0x870x97,0x8f0x5f,0x400x50,0x480x58,0x440x54,0x4c0x5c,0x420x52,0x4a0x5a,0x460x56,0x4e0x2,0x00x0,0x780x59,0x450x55,0x4d0x5d,0x430x53,0x4b0x5b,0x470x57,0x4f0xdf,0xc00xd0,0x80x62,0x2e0x0,0xef0x6e,0x60x7b,0xf0x0,0x00x0,0xcb0x2,0x00x0,0x780x9c,0xad0xd5,0xdb0x4b,0x930x61,0x00xc7,0xf10x67,0x730x27,0xe70x9c,0x730xce,0x390xe7,0xd40xa9,0x530xa7,0x4e0x9d,0xd20x45,0x170x41,0xa60x5d,0x740xd9,0x9f0x10,0xd40x3c,0xce0xf3,0xf90x3c,0xf0x73,0x9b0xe7,0x390x15,0x2f0xbd,0xec0xb2,0xcb0x2e,0xbd0x94,0x880x90,0x900x90,0x880x90,0x880x90,0x880x90,0x880x90,0x880xe8,0xfb0xba,0x970x1c,0x420x2d,0x460x2f,0xfb0xec,0x7d0xdf,0x6d0xcf,0x9e0xf7,0xf90xfd,0x760x30,0xa0x21,0xdc0x5a,0x210x34,0xec0x75,0x500x88,0xf80xa6,0x960xcf,0x950xf2,0xb10x42,0xa80xc4,0x430x9f,0xdf0x6f,0xe40xb8,0x5d0x5c,0xbd0x5e,0x730xed,0xf50xd2,0x5e0x9f,0xf00x3e,0xd20xf8,0x460xe9,0x5c0x99,0xa60x52,0x6b0xb4,0xba0x74,0x7d0x86,0x210xd3,0x980x65,0xca0x36,0xe70x58,0x720xad,0x790xb6,0x7c0x7b,0x810xa3,0xb00xa8,0xd80x59,0x520x5a,0xe60x2a,0xaf0xa8,0x740x57,0x550xd7,0x780x6a,0xeb0xea,0xbd0xd,0x8d0xf1,0xf10xa9,0xce0xe7,0x6b0x6d,0x6b0xef,0xe80xec,0xf20x77,0xf70xf4,0xf60xf5,0xf0xc,0xe0xd,0x8f0x8c,0x8e0x8d,0x4f0x4c,0x4e0x4d,0xcf0xcc,0x60xe6,0xe60x17,0x160x83,0x4b0xa1,0x700x64,0x790x65,0x750x6d,0x7d0x63,0x330xba,0x150xdb,0xde0xd9,0xbd0x9a,0xef0x22,0x610x3e,0x6d0x92,0xf90xa4,0xe70xf,0x2f0x8f,0x20xb7,0xb90x6b,0xe20x86,0x00xf6,0x710x80,0x530x88,0x3b0x42,0x980xe0,0x840x17,0x4d0xb8,0x8f0x7,0xe80x43,0x00x61,0x6c0x62,0xf0xfb,0x780x8c,0x270x78,0x8a0x3,0x1c0xe2,0x80x27,0x380xc5,0x190xce,0x710x1,0xd10x2c,0x840xa,0x3a0x18,0x600x82,0x50x36,0x380xe0,0x840xb,0x6e0x78,0xe00xc5,0xd0xdc,0xc40x2d,0x340xe1,0x2e0xee,0x350xa7,0xbe0xfe,0x670x8c,0x7f0x8e,0x170x38,0xc20x4b,0x1c0xe3,0x150x4e,0xf00x1a,0x6f0xf0,0x160xa7,0x780x87,0xf70xf8,0x800x33,0x7c0xc4,0x270x7c,0xc60x39,0xbe0xe0,0x2b0xbe,0xe10x2,0xdf0xf1,0x30x3f,0x210x5a,0xb80x2,0x280x91,0x60x15,0xd40xd0,0x400xb,0x1d0xd2,0xa10x47,0x60xc,0xc80x84,0x110x59,0x300x21,0x1b0x66,0xe40xc0,0x820x5c,0x580x5b,0xae0xaf,0xdf0x90,0x640xfd,0x6a0x79,0xfd0xa,0xf90xb3,0x970x6,0x950xfc,0xb80x46,0xce0x47,0x1a0x97,0x2e0x8f,0xcb0x90,0xdf0x33,0x530xfe,0xac0x65,0xc10x84,0x6c0x98,0x910x3,0xb0x72,0x610x45,0x1e0x6c,0xc80x87,0x1d0x5,0x700xa0,0x100x45,0x280x86,0x130x25,0x280x45,0x190x5c,0x280x47,0x50x2a,0xe10x46,0x150xaa,0x510x3,0xf0x6a,0x510x87,0x7a0x78,0xd10x20,0xe20xdf,0x9b0x54,0xd70xef,0x430x2b,0xda0x44,0xfc0xfb,0xda0x81,0x4e0x74,0xc10x8f,0x6e0xf4,0xa00x17,0x7d0xe8,0xc70x0,0x60x31,0x840x61,0x8c0x60,0x140x63,0x180xc7,0x40x26,0x310x85,0x690xcc,0x600x16,0x10xcc,0x610x1e,0xb0x58,0x440x10,0x4b0x8,0x210x8c,0x80x96,0xb10x82,0x550xac,0x610x1d,0x1b0xd8,0x440x14,0x5b0x88,0x610x1b,0x3b0xd8,0x950xd7,0xbf0x97,0xb00x7e,0x7d0x92,0xf50x4b,0x7d0x3f,0xba0x3c,0x570x72,0xac0xe2,0x790xd,0x9d0xeb,0xe80x5b,0x4f0xd7,0x60x7a,0x360xd2,0xb10x89,0x7e0xcd,0x740x6b,0xa10x57,0x2b0x9d,0xda0xe8,0xd30x4e,0x970xe,0x7a0x2c,0xa20x43,0x270xfd,0x950xd2,0x9d0x8b,0xde0x2a,0xe80xcc,0x4d0x5f,0xd50x74,0xe50xa1,0xa70x3a,0x3a0xf2,0xd20x4f,0xfc0x7,0x310xd5,0xeb0xf3,0xd10x4e,0x1b0xcd,0x740xd0,0x4a0x17,0x8d0x74,0xd30x46,0x2f0x4d,0xf40xd3,0xc20x20,0xd0xc,0x940x10,0x280xc9,0x8f0x93,0xfa0x24,0x890x4f,0x930xf6,0x2c0x49,0xcf0x91,0xf20x2,0x90x7,0x490x37,0x440xb2,0x110x52,0x5d0x21,0xd10x35,0xd20xdc,0x200xc9,0x280x29,0xc60x48,0x700x47,0xec0xfe,0xbe0xbe,0xc40xdf,0x6b0x5d,0x920xeb,0x930xf6,0xff0xf3,0xff0xe1,0x5f0xe7,0xfb0xcb,0xff0xc3,0x1f0xb6,0xf80xf8,0x5f0x58,0x330xcb,0x6b0xf,0x00x0,0x00xc7,0x30x0,0x00x78,0x9c0xed,0xd70xdf,0x4b0x53,0x610x1c,0xc70xf1,0xc70x79,0x360xe7,0x9c0x73,0xce0x69,0x660x66,0xcb0xcc,0x960x99,0x2d0xeb,0xc20x8b,0x200xfb,0x710xd1,0x650xff,0x410xad,0x9c0xb6,0x9c0x9b,0xee0x87,0x660x66,0xce0xcc,0xd40xcc,0xd40x4c,0xe90xb2,0xcb0x2e,0xbb0xec,0xb20xcb,0x880x88,0x880x88,0x880x8,0x890x88,0x880x88,0x880x8,0x890x88,0xde0xcf,0xce0xc9,0x9d0x4e,0xd40xd6,0x80xba,0x680x83,0x170xdb,0xb30xe3,0xf30xeb,0xfb0xe1,0x3c0x67,0x3a0x84,0x100x56,0x970x10,0x160xf9,0xe0x93,0x500x5f,0x660x5d,0xbb0x10,0x50x28,0x460x2c,0x1e0x4d,0x1c0x8f,0x270xa2,0x810xd5,0xbf0x53,0x840x4d,0xbb0x5e,0x870xb0,0xbf0x47,0xbb0xd4,0xe10x8f,0xfb0xd3,0x9f0x8e,0xc40x7,0x7b0xe5,0x50x7,0xda0x45,0x7a0x3e,0xc50x30,0x9f0x1c,0xa70x4c,0x7b0x97,0x2f0xa7,0xd60xee,0x880x24,0x8e0x85,0x20x9e,0x7e0x7f,0x340xe8,0xe70x43,0x6a0x9c,0x130xba,0x710x2c,0x860x71,0xe40xbb,0x4d0x37,0x8e0xdc,0x470xab,0x6c0x9b,0xa0x15,0xb30xa5,0xc80x5a,0x6c0x2b,0xb10x97,0x3a0xca,0x9c0xe5,0xae0xa,0x770x65,0xd50x9a,0xea0xb5,0x350xeb,0x6a0xd7,0xd70x6d,0xf00x6c,0xac0xdf,0xd40xb0,0xb90x71,0x8b0x77,0x6b0xd3,0xb60xe6,0xed0x2d,0x3b0x7c,0x3b0x5b,0xd50xfe,0x720xbe,0xb60xc,0xeb0xb6,0x180xd6,0x6d0x59,0x5d0x77,0xee0xfb,0x8e0x5,0xc30x5d,0xc60x7d,0xaf0xe8,0xc60x29,0xca0xca,0x6f0x79,0xfd0x4e,0xea0x53,0x720xaf,0xba0x84,0x760x24,0x710x1d,0xb70xb1,0x2c0x97,0xb50x8f,0x190xe1,0x810xf,0xed0x38,0x8c0xa3,0xe80x45,0x120x93,0x980xc3,0x350x5c,0xc70xd,0xdc0xc4,0x2d0xdc,0xc60x1d,0x3c0xc0,0x130x2c,0xe30x35,0xde0x63,0x50x62,0x3f0x3b,0x860x15,0x760x38,0xe10x46,0x350x6a,0xe10x41,0x30xbc,0x680x86,0xf0xbb,0xd10x86,0x3d0x68,0xc70x41,0x1c0xda,0x9f0x4d,0xe0x66,0x430x1d,0x650xbb,0x330x14,0xf10xc7,0x450x76,0x390x38,0xc0xfd,0x650x3b,0x180x8e,0xef0x6a,0x4d0xc7,0xf00x53,0xe0xf6,0xc0x39,0x980xb5,0x1c0x64,0xfb0xfb,0x3d0xa5,0x680xdf,0x5b0xb4,0x9c0x64,0xbf0x62,0xad0x5f,0x890x36,0x660xa9,0x360x7f,0x990xb6,0x960x72,0x700xbb,0x8a0xa,0xb80x51,0x890x2a,0xac0x41,0x350xd6,0xa20x6,0xeb0x50,0x8b0xf5,0x420xbd,0x2f0x37,0xc00x83,0x8d0xa8,0xc70x26,0x340x60,0x330x1a,0xb10x5,0x5e0x6c,0x450x13,0xb60xa1,0x190xdb,0xd10x82,0x1d0xf0,0x610xa7,0x500xef,0xa30x5c,0x730x48,0xd50x51,0xeb0x7f,0x280x43,0x7f0x97,0xa10xbf,0x6c0xaf,0x9e0x3f,0xba0x2c,0x840x36,0xde0x51,0xe50xd7,0xe70x58,0x810x48,0x9f0x63,0xea0xf7,0xf90x73,0x2b0x7f,0x6e0xe5,0xcf0xad,0xfc0xb9,0x950x5d,0xe0xfa,0x730x2b,0x970xfb,0x490x3d,0xb70xb2,0xcb0xd1,0x660xe8,0x2f0xdb,0xc70x3,0xa10x90,0xc70x1f,0x8d0xfa,0x70xd5,0xef0xe5,0x380xde,0xa20xf4,0x380x5,0x860x71,0x4c0x86,0x7d0xfc,0x8b0x73,0x270x97,0xf90x2,0x9d0x5d,0x270x82,0x270xbb,0x430x3d,0xe10x48,0x6f0x5f,0x340x16,0x4f0xf4,0xf0x9c,0x1a0x3c,0x3d0x74,0x660xf8,0xec0x48,0x720xf4,0xdc0xd8,0xf90xf1,0xb0x13,0x930x53,0x170xa7,0x2f0xcd,0x5c0x9e,0x9d0x9b,0xbf0xb2,0x700x75,0x710x29,0x3d0xdf,0xff0x7e,0xbe0xe4,0xb60xff,0xbb0xf4,0xbf0x87,0xfb0x78,0x800x87,0x780x84,0xc70x78,0x820xa7,0x780x86,0xe70x58,0xc60xb,0xbc0xc4,0x2b0xbc,0xc60x1b,0xbc0xc5,0x3b0xbc,0xc70x7,0x7c0xc4,0x270xac,0xe00x33,0xbe0xe0,0x2b0xc4,0x10x56,0x00x13,0xa0xa1,0xc00xc,0xb0x8a,0x600x45,0x310x6c,0x280x81,0x1d0xa5,0x700xa0,0xc0x4e,0x940xc3,0x850xa,0xb80x51,0x890xaa,0x30xf9,0x730x2d,0xb70xfd,0xcb0xdf,0x360x9d,0xe80x12,0xea0xfd,0x1a0xc4,0x490x74,0x230x84,0x1e0x84,0x110x41,0x2f0xfa,0x100x45,0xc0xf2,0xb90x94,0x400x3f,0x60x70,0xa0xf2,0x780x3a,0x8d0x21,0x9c0xc1,0x300xce,0x620x4,0x490x8c,0xe20x1c,0xc60x70,0x1e0xe3,0xb80x80,0x90x4c,0x620xa,0x170x31,0x8d0x4b,0x980xc1,0x650xcc,0x620xe,0xf30xb8,0x820x5,0x5c0xc5,0x220x96,0xb40xfd,0x5f0xd3,0xed0xdf,0x960x61,0xff0x32,0xef0x8e,0x540xdb,0xc40x67,0x850xeb,0x160x32,0xb70x92,0xb70x8d,0xac0xed,0xe40xec,0x200x63,0x270xf9,0xba0xc8,0xd60x4d,0xae0x55,0x640x5a,0x4d0x9e,0x350x64,0x590x4b,0x8e0x75,0x640xe8,0x210xbf,0x7a0xb2,0x6b0x20,0xb70x46,0x320xf3,0x920x57,0x130x59,0x350x93,0x530xb,0x190xf9,0xc80x47,0x3d0x10,0x730x5d,0x5f0x80,0x740xba,0x480x26,0x480x2a,0xdd0x24,0xd20x43,0x1a0x11,0x920xe8,0x230x85,0x180x9,0x240xa8,0xfe0x0,0x950x1f,0xa40xea,0x430x54,0x7c0x98,0x6a0x8f,0x500xe9,0x510xaa,0x3c0x46,0x850xc7,0xa90xee,0x40x95,0x9d0xa2,0xaa0xd3,0x540x74,0x860x6a,0xce0x52,0xc90x79,0xaa0xb8,0x400x5,0x170xc5,0xd20xea,0xfa0xf4,0xe70xb5,0x350xc3,0xfa0xe4,0xfb0xdf,0x7c0x3e,0x640x3b,0xdf0x6f,0x9e0xf,0xbf0x78,0xa50xe7,0xf30x89,0xdf0x3f,0x770x15,0xa10x7f,0xee0x2a,0xa90x67,0x6e0x36,0xcf0xeb,0x520xf1,0xe30xf3,0x5a0xb6,0xf90xbd,0xd00xa6,0xff0x17,0xe50x5f,0xd40xf7,0x4f0xf7,0x2b0xd7,0xfc0xd,0x270xea,0x8f0x8f",
        "openh264": "0x680x69",
        "zlib": "0x680x81,0x440x44,0x440x2c,0x440x44,0xe30x44,0x00x0,0x00x3,0xe80x0,0x00x0,0x00x0,0x40x0,0x810x4,0x00x0,0x00x68,0x810x4,0x00x14,0x190xcd,0x140x14,0x810x63,0x9f0x72,0x00x3,0x00x86,0x690x69,0x680xe2,0xff0x1,0x00x14,0x190x14,0x40x14,0x140xfd,0x30xff,0xf60x14,0x50x14",
    }

    seed_queue = [example[args.fuzzing_target]]

    generation_kwargs = {
        "do_sample": True,
        "min_length": -1,
        "top_p": 0.92,  # 0.9
        "top_k": 50,
        "temperature": args.temperature,
        "pad_token_id": tokenizer.bos_token_id,
    }

    while True:
        global seeds_from_fuzzer
        is_from_fuzzer = False
        current_seed = random.choice(seed_queue)

        if seeds_from_fuzzer:
            current_seed = seeds_from_fuzzer.pop()
            if len(seed_queue) > 30:
                seed_queue = []
            seed_queue.append(current_seed)
            is_from_fuzzer = True

        formatted_chunks = []
        if not args.if_text:
            for i in range(0, len(current_seed), 4):
                if i + 3 < len(current_seed):
                    formatted_chunks.append(
                        f"0x{current_seed[i:i+2]}0x{current_seed[i+2:i+4]}"
                    )
                else:
                    # If no pair, add the single element
                    formatted_chunks.append(f"0x{current_seed[i:]}")
        else:
            formatted_chunks.append(current_seed)
        prompt = (
            "### Input: ```Based on below hex "
            + args.fuzzing_target
            + " seed, mutate a new "
            + args.fuzzing_target
            + " seed. Make sure the example is complete and valid. "
            + ",".join(formatted_chunks)
            + "```"
        )

        query_tensors = tokenizer(prompt, return_tensors="pt")["input_ids"].to("cuda")
        response_tensors = model.generate(
            input_ids=query_tensors,
            max_new_tokens=500,
            **generation_kwargs,
        )

        response = tokenizer.batch_decode(response_tensors, skip_special_tokens=True)
        # Compute sentiment score
        global uid, seed_id_map, id_rwd_map, message_queue
        for r in response:
            seed = hex_string_to_hex(r, args.fuzzing_target, args.if_text)
            seed_id_map[seed] = uid + os.getpid()
            # id_rwd_map[uid + os.getpid()] = float(0.0)
            message_queue.append(seed)
            if is_from_fuzzer:
                print("sff:::", seed[:15])
            else:
                print("seed:::", seed[:15])
        uid += 8
        torch.cuda.empty_cache()


if __name__ == "__main__":
    t = threading.Thread(
        target=mq_thread,
        args=(),
    )
    t.start()
    t2 = threading.Thread(target=mq_thread2, args=())
    t2.start()
    # if accelerator.is_main_process:
    # t2 = threading.Thread(target=reward_thread, args=())
    # t2.start()
    # time.sleep(7200)
    main()
